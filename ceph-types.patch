--- ceph-12.2.13/src/os/filestore/FileStore.cc.orig	2020-01-30 21:52:36.000000000 +0100
+++ ceph-12.2.13/src/os/filestore/FileStore.cc	2020-06-03 21:27:26.387210803 +0200
@@ -922,7 +922,7 @@
   }
 
 #if defined(__linux__)
-  if (basefs.f_type == BTRFS_SUPER_MAGIC &&
+  if (static_cast<uint32_t>(basefs.f_type) == BTRFS_SUPER_MAGIC &&
       !g_ceph_context->check_experimental_feature_enabled("btrfs")) {
     derr << __FUNC__ << ": deprecated btrfs support is not enabled" << dendl;
     goto close_fsid_fd;
@@ -1208,7 +1208,7 @@
   blk_size = st.f_bsize;
 
 #if defined(__linux__)
-  if (st.f_type == BTRFS_SUPER_MAGIC &&
+  if (static_cast<uint32_t>(st.f_type) == BTRFS_SUPER_MAGIC &&
       !g_ceph_context->check_experimental_feature_enabled("btrfs")) {
     derr <<__FUNC__ << ": deprecated btrfs support is not enabled" << dendl;
     return -EPERM;
--- ceph-14.2.22/src/compressor/snappy/SnappyCompressor.h.orig	2021-06-30 00:09:10.000000000 +0200
+++ ceph-14.2.22/src/compressor/snappy/SnappyCompressor.h	2022-06-11 13:56:24.966983465 +0200
@@ -96,7 +96,7 @@ class SnappyCompressor : public Compress
     if (qat_enabled)
       return qat_accel.decompress(p, compressed_len, dst);
 #endif
-    snappy::uint32 res_len = 0;
+    uint32_t res_len = 0;
     BufferlistSource source_1(p, compressed_len);
     if (!snappy::GetUncompressedLength(&source_1, &res_len)) {
       return -1;
--- ceph-14.2.22/src/os/bluestore/BlueFS.cc.orig	2021-06-30 00:09:10.000000000 +0200
+++ ceph-14.2.22/src/os/bluestore/BlueFS.cc	2022-06-11 16:48:43.774306676 +0200
@@ -1737,7 +1737,7 @@ int64_t BlueFS::_read_random(
       }
     } else {
       auto left = buf->get_buf_remaining(off);
-      int64_t r = std::min(len, left);
+      int64_t r = std::min<int64_t>(len, left);
       logger->inc(l_bluefs_read_random_buffer_count, 1);
       logger->inc(l_bluefs_read_random_buffer_bytes, r);
       dout(20) << __func__ << " left 0x" << std::hex << left
--- ceph-14.2.22/src/os/bluestore/BlueStore.cc.orig	2021-06-30 00:09:10.000000000 +0200
+++ ceph-14.2.22/src/os/bluestore/BlueStore.cc	2022-06-11 17:36:58.645290480 +0200
@@ -5948,7 +5948,7 @@ size_t BlueStore::available_freespace(ui
     if (dist_to_alignment >= len)
       return;
     len -= dist_to_alignment;
-    total += p2align(len, alloc_size);
+    total += p2align<uint64_t>(len, alloc_size);
   };
   alloc->dump(iterated_allocation);
   return total;
--- ceph-14.2.22/src/client/fuse_ll.cc.orig	2021-06-30 00:09:10.000000000 +0200
+++ ceph-14.2.22/src/client/fuse_ll.cc	2022-06-11 20:41:03.452122291 +0200
@@ -192,7 +192,7 @@ static void fuse_ll_lookup(fuse_req_t re
 }
 
 static void fuse_ll_forget(fuse_req_t req, fuse_ino_t ino,
-			   long unsigned nlookup)
+			   uint64_t nlookup)
 {
   CephFuse::Handle *cfuse = fuse_ll_req_prepare(req);
   cfuse->client->ll_forget(cfuse->iget(ino), nlookup+1);
--- ceph-15.2.16/src/tools/rbd_mirror/image_replayer/snapshot/Replayer.cc.orig	2022-03-01 07:44:29.000000000 +0100
+++ ceph-15.2.16/src/tools/rbd_mirror/image_replayer/snapshot/Replayer.cc	2022-06-13 06:26:31.761657298 +0200
@@ -253,7 +253,7 @@ bool Replayer<I>::get_replay_status(std:
 
   json_spirit::mObject root_obj;
   root_obj["replay_state"] = replay_state;
-  root_obj["remote_snapshot_timestamp"] = remote_snap_info->timestamp.sec();
+  root_obj["remote_snapshot_timestamp"] = static_cast<int64_t>(remote_snap_info->timestamp.sec());
 
   auto matching_remote_snap_id = util::compute_remote_snap_id(
     m_state_builder->local_image_ctx->image_lock,
@@ -268,7 +268,7 @@ bool Replayer<I>::get_replay_status(std:
     // the local snapshot would just be the time the snapshot was
     // synced and not the consistency point in time.
     root_obj["local_snapshot_timestamp"] =
-      matching_remote_snap_it->second.timestamp.sec();
+      static_cast<int64_t>(matching_remote_snap_it->second.timestamp.sec());
   }
 
   matching_remote_snap_it = m_state_builder->remote_image_ctx->snap_info.find(
@@ -276,7 +276,7 @@ bool Replayer<I>::get_replay_status(std:
   if (m_remote_snap_id_end != CEPH_NOSNAP &&
       matching_remote_snap_it !=
         m_state_builder->remote_image_ctx->snap_info.end()) {
-    root_obj["syncing_snapshot_timestamp"] = remote_snap_info->timestamp.sec();
+    root_obj["syncing_snapshot_timestamp"] = static_cast<int64_t>(remote_snap_info->timestamp.sec());
     root_obj["syncing_percent"] = static_cast<uint64_t>(
         100 * m_local_mirror_snap_ns.last_copied_object_number /
         static_cast<float>(std::max<uint64_t>(1U, m_local_object_count)));
--- ceph-15.2.16/src/librbd/object_map/DiffRequest.cc.orig	2022-03-01 07:44:29.000000000 +0100
+++ ceph-15.2.16/src/librbd/object_map/DiffRequest.cc	2022-06-13 06:09:45.790195571 +0200
@@ -187,7 +187,7 @@ void DiffRequest<I>::handle_load_object_
     m_object_map.resize(m_object_diff_state->size());
   }
 
-  uint64_t overlap = std::min(m_object_map.size(), prev_object_diff_state_size);
+  uint64_t overlap = std::min<uint64_t>(m_object_map.size(), prev_object_diff_state_size);
   auto it = m_object_map.begin();
   auto overlap_end_it = it + overlap;
   auto diff_it = m_object_diff_state->begin();
