--- ceph-16.2.7/src/SimpleRADOSStriper.cc~	2021-12-07 17:15:49.000000000 +0100
+++ ceph-16.2.7/src/SimpleRADOSStriper.cc	2022-02-12 21:59:28.261721940 +0100
@@ -140,7 +140,7 @@
   return 0;
 }
 
-int SimpleRADOSStriper::truncate(uint64_t size)
+int SimpleRADOSStriper::truncate(size_t size)
 {
   d(5) << size << dendl;
 
--- ceph-17.2.7/src/os/bluestore/BlueFS.cc.orig	2024-02-24 21:45:42.755706899 +0100
+++ ceph-17.2.7/src/os/bluestore/BlueFS.cc	2024-02-24 21:51:20.641018002 +0100
@@ -4617,7 +4617,7 @@ size_t BlueFS::probe_alloc_avail(int dev
     if (dist_to_alignment >= len)
       return;
     len -= dist_to_alignment;
-    total += p2align(len, alloc_size);
+    total += p2align((uint64_t)len, alloc_size);
   };
   if (alloc[dev]) {
     alloc[dev]->foreach(iterated_allocation);
--- ceph-16.2.7/src/librbd/object_map/DiffRequest.cc.orig	2021-12-07 17:15:49.000000000 +0100
+++ ceph-16.2.7/src/librbd/object_map/DiffRequest.cc	2022-02-12 22:17:55.163378523 +0100
@@ -187,7 +187,7 @@
     m_object_map.resize(m_object_diff_state->size());
   }
 
-  uint64_t overlap = std::min(m_object_map.size(), prev_object_diff_state_size);
+  uint64_t overlap = std::min(m_object_map.size(), (uint64_t)prev_object_diff_state_size);
   auto it = m_object_map.begin();
   auto overlap_end_it = it + overlap;
   auto diff_it = m_object_diff_state->begin();
--- ceph-16.2.7/src/tools/neorados.cc~	2021-12-07 17:15:49.000000000 +0100
+++ ceph-16.2.7/src/tools/neorados.cc	2022-02-12 22:23:25.836643956 +0100
@@ -205,7 +205,7 @@
 
   std::size_t off = 0;
   ceph::buffer::list bl;
-  while (auto toread = std::max(len - off, io_size)) {
+  while (auto toread = std::max(len - off, (uint64_t)io_size)) {
     R::ReadOp op;
     op.read(off, toread, &bl);
     r.execute(obj, pool, std::move(op), nullptr, y[ec]);
--- ceph-16.2.7/src/tools/cephfs_mirror/FSMirror.cc.orig	2021-12-07 17:15:49.000000000 +0100
+++ ceph-16.2.7/src/tools/cephfs_mirror/FSMirror.cc	2022-02-12 22:30:46.487298972 +0100
@@ -345,7 +345,7 @@
     std::scoped_lock locker(m_lock);
     m_directories.emplace(dir_path);
     m_service_daemon->add_or_update_fs_attribute(m_filesystem.fscid, SERVICE_DAEMON_DIR_COUNT_KEY,
-                                                 m_directories.size());
+                                                 (uint64_t)m_directories.size());
 
     for (auto &[peer, peer_replayer] : m_peer_replayers) {
       dout(10) << ": peer=" << peer << dendl;
@@ -363,7 +363,7 @@
     if (it != m_directories.end()) {
       m_directories.erase(it);
       m_service_daemon->add_or_update_fs_attribute(m_filesystem.fscid, SERVICE_DAEMON_DIR_COUNT_KEY,
-                                                   m_directories.size());
+                                                   (uint64_t)m_directories.size());
       for (auto &[peer, peer_replayer] : m_peer_replayers) {
         dout(10) << ": peer=" << peer << dendl;
         peer_replayer->remove_directory(dir_path);
--- ceph-17.2.2/src/os/bluestore/BlueStore.cc.orig	2022-07-21 19:29:33.000000000 +0200
+++ ceph-17.2.2/src/os/bluestore/BlueStore.cc	2022-08-23 16:55:10.753944515 +0200
@@ -18583,7 +18583,7 @@ int BlueStore::__restore_allocator(Alloc
   uint64_t        extent_count       = 0;
   uint64_t        extents_bytes_left = file_size - (header_size + trailer_size + sizeof(crc));
   while (extents_bytes_left) {
-    int req_bytes  = std::min(extents_bytes_left, sizeof(buffer));
+    uint64_t req_bytes  = std::min<uint64_t>(extents_bytes_left, sizeof(buffer));
     int read_bytes = bluefs->read(p_handle.get(), offset, req_bytes, nullptr, (char*)buffer);
     if (read_bytes != req_bytes) {
       derr << "Failed bluefs->read()::read_bytes=" << read_bytes << ", req_bytes=" << req_bytes << dendl;
--- ceph-17.2.2/src/rgw/store/dbstore/sqlite/sqliteDB.cc.orig	2022-07-21 19:29:33.000000000 +0200
+++ ceph-17.2.2/src/rgw/store/dbstore/sqlite/sqliteDB.cc	2022-08-24 06:15:01.162110603 +0200
@@ -514,8 +514,10 @@ static int list_lc_head(const DoutPrefix
 
   op.lc_head.index = (const char*)sqlite3_column_text(stmt, LCHeadIndex);
   op.lc_head.head.marker = (const char*)sqlite3_column_text(stmt, LCHeadMarker);
- 
-  SQL_DECODE_BLOB_PARAM(dpp, stmt, LCHeadStartDate, op.lc_head.head.start_date, sdb);
+
+  { int64_t start_date;
+  SQL_DECODE_BLOB_PARAM(dpp, stmt, LCHeadStartDate, start_date, sdb);
+  op.lc_head.head.start_date = start_date; }
 
   return 0;
 }
@@ -2773,7 +2775,8 @@ int SQLInsertLCHead::Bind(const DoutPref
   SQL_BIND_TEXT(dpp, stmt, index, params->op.lc_head.head.marker.c_str(), sdb);
 
   SQL_BIND_INDEX(dpp, stmt, index, p_params.op.lc_head.start_date.c_str(), sdb);
-  SQL_ENCODE_BLOB_PARAM(dpp, stmt, index, params->op.lc_head.head.start_date, sdb);
+  { int64_t start_date = params->op.lc_head.head.start_date;
+  SQL_ENCODE_BLOB_PARAM(dpp, stmt, index, start_date, sdb); }
 
 out:
   return rc;
--- ceph-17.2.3/src/seastar/src/core/file.cc.orig	2021-12-19 23:02:10.000000000 +0100
+++ ceph-17.2.3/src/seastar/src/core/file.cc	2022-08-28 09:19:17.258501014 +0200
@@ -313,7 +313,7 @@ posix_file_impl::close() noexcept {
 
 future<uint64_t>
 blockdev_file_impl::size(void) noexcept {
-    return engine()._thread_pool->submit<syscall_result_extra<size_t>>([this] {
+    return engine()._thread_pool->submit<syscall_result_extra<uint64_t>>([this] {
         uint64_t size;
         int ret = ::ioctl(_fd, BLKGETSIZE64, &size);
         return wrap_syscall(ret, size);
@@ -908,7 +908,7 @@ append_challenged_posix_file_impl::trunc
 
 future<uint64_t>
 append_challenged_posix_file_impl::size() noexcept {
-    return make_ready_future<size_t>(_logical_size);
+    return make_ready_future<uint64_t>(_logical_size);
 }
 
 future<>
@@ -996,7 +996,7 @@ make_file_impl(int fd, file_open_options
                 engine().fstatfs(fd).then([fd, st_dev] (struct statfs sfs) {
                     internal::fs_info fsi;
                     fsi.block_size = sfs.f_bsize;
-                    switch (sfs.f_type) {
+                    switch (static_cast<unsigned>(sfs.f_type)) {
                     case 0x58465342: /* XFS */
                         dioattr da;
                         if (::ioctl(fd, XFS_IOC_DIOINFO, &da) == 0) {
--- ceph-17.2.3/src/seastar/src/core/fstream.cc.orig	2021-12-19 23:02:10.000000000 +0100
+++ ceph-17.2.3/src/seastar/src/core/fstream.cc	2022-08-28 09:22:32.072057177 +0200
@@ -419,7 +419,7 @@ private:
         if ((buf.size() & (_file.disk_write_dma_alignment() - 1)) != 0) {
             // If buf size isn't aligned, copy its content into a new aligned buf.
             // This should only happen when the user calls output_stream::flush().
-            auto tmp = allocate_buffer(align_up(buf.size(), _file.disk_write_dma_alignment()));
+            auto tmp = allocate_buffer(align_up<uint64_t>(buf.size(), _file.disk_write_dma_alignment()));
             ::memcpy(tmp.get_write(), buf.get(), buf.size());
             ::memset(tmp.get_write() + buf.size(), 0, tmp.size() - buf.size());
             buf = std::move(tmp);
